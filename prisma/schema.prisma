generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  username   String  @unique @db.VarChar(32)
  avatar_url String? 
  email      String  @unique @db.VarChar(128)
  password   String  @db.VarChar(128)
  status     Boolean @default(true)
  steam_user String  @db.VarChar(32)
  gamepass   Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  friends      Friends[]
  promotions   Promotions[]
  custom_games Custom_games[]

  @@map("user")
}

model Friends {
  id      String  @id @default(uuid())
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  newFKey String //new foreign key

  @@map("friends")
}

model Custom_games {
  id        String  @id @default(uuid())
  name      String
  image_url String
  platform  String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@map("custom_games")
}

model Promotions {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(64)
  price       Decimal @db.Decimal(5, 2)
  promo_url   String
  description String? @db.VarChar(256)
  shiny_meter Int     @default(0)
  User        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  rate_log    Rate_log[]

  @@map("promotions")
}

model Rate_log {
    id          String @id @default(uuid())
    user_id     String
    like        Boolean
    Promotion   Promotions @relation(fields: [promotionId], references: [id], onDelete: Cascade)
    promotionId String

    @@map("rate_log")
}